#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <DHT.h>
#include <WiFiS3.h>
#include <Firebase_ESP_Client.h>


// WiFi credentials
const char* ssid     = "NotBadForAFirstDraft";
const char* password = "synapse123456";


// Firebase credentials
#define API_KEY       "AIzaSyCpSDimugca9DbFwFMG5saaqHEA1rpZsfw"
#define DATABASE_URL  "https://myplantmonitor-585b7-default-rtdb.firebaseio.com/"
#define DATABASE_SECRET "0csVKZTdgNFdmVujyGMNGwmUU1Q2UeWsctBmyg0D"


// Firebase objects
FirebaseData fbdo;
FirebaseAuth auth;
FirebaseConfig config;


// LCD and sensor setup
LiquidCrystal_I2C lcd(0x27, 16, 2);
#define DHTPIN 3
#define DHTTYPE DHT11
DHT dht(DHTPIN, DHTTYPE);


// Pin definitions
const byte PIN_LED_RED    = 8;
const byte PIN_LED_YELLOW = 9;
const byte PIN_LED_GREEN  = 10;
const byte PIN_SOIL       = A0;
const byte PIN_PUMP       = 6;


// Calibration and smoothing
const int dryVal = 512;
const int wetVal = 310;
const bool ACTIVE_LOW = false;


const byte AVG_SAMPLES = 10;
int buf[AVG_SAMPLES] = {0};
byte bufIdx = 0;


// Timing
const unsigned long DISPLAY_INTERVAL = 2000;
const unsigned long PUMP_DURATION    = 3000;
const unsigned long PUMP_COOLDOWN    = 10000;
unsigned long lastDisplay = 0;
unsigned long lastPumpRun = 0;
bool pumpRunning = false;


void setLED(byte pin, bool on) {
  digitalWrite(pin, (ACTIVE_LOW ? !on : on));
}


void updateLEDs(int pct) {
  setLED(PIN_LED_RED,    pct <= 20);
  setLED(PIN_LED_YELLOW, pct > 20 && pct <= 50);
  setLED(PIN_LED_GREEN,  pct > 50);
}


void setup() {
  Serial.begin(9600);
  dht.begin();
  lcd.init();
  lcd.backlight();


  pinMode(PIN_LED_RED, OUTPUT);
  pinMode(PIN_LED_YELLOW, OUTPUT);
  pinMode(PIN_LED_GREEN, OUTPUT);
  pinMode(PIN_PUMP, OUTPUT);
  digitalWrite(PIN_PUMP, LOW);


  lcd.setCursor(0, 0); lcd.print("Plant Monitor :)");
  delay(2000);
  lcd.setCursor(0, 1); lcd.print("Booting....");
  delay(2000);
  lcd.clear();


  WiFi.begin(ssid, password);
  Serial.print("Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500); Serial.print(".");
  }
  Serial.println("\n✅ WiFi Connected!");


  // Firebase config with legacy token
  config.api_key = API_KEY;
  config.database_url = DATABASE_URL;
  config.signer.tokens.legacy_token = DATABASE_SECRET;


  Firebase.begin(&config, &auth);
  Firebase.reconnectWiFi(true);


  Serial.print("Connecting to Firebase");
  unsigned long t0 = millis();
  while (!Firebase.ready()) {
    delay(500); Serial.print(".");
    if (millis() - t0 > 15000) {
      Serial.println("\n❌ Firebase timeout.");
      return;
    }
  }
  Serial.println("\n✅ Firebase Connected!");
}


void loop() {
  buf[bufIdx] = analogRead(PIN_SOIL);
  bufIdx = (bufIdx + 1) % AVG_SAMPLES;
  long sum = 0;
  for (byte i = 0; i < AVG_SAMPLES; i++) sum += buf[i];
  int pct = constrain(map(sum / AVG_SAMPLES, dryVal, wetVal, 0, 100), 0, 100);


  float tempF = dht.readTemperature() * 1.8 + 32;
  float hum = dht.readHumidity();


  updateLEDs(pct);


  if (pct <= 20 && !pumpRunning && millis() - lastPumpRun > PUMP_COOLDOWN) {
    digitalWrite(PIN_PUMP, HIGH);
    pumpRunning = true;
    lastPumpRun = millis();
  }
  if (pumpRunning && millis() - lastPumpRun >= PUMP_DURATION) {
    digitalWrite(PIN_PUMP, LOW);
    pumpRunning = false;
  }


  Serial.print("Moisture: "); Serial.print(pct);
  Serial.print("%  Temp: "); Serial.print(tempF);
  Serial.print("F  Humidity: "); Serial.println(hum);


  if (Firebase.ready()) {
    Firebase.RTDB.setInt(&fbdo, "/plant1/moisture", pct);
    Firebase.RTDB.setFloat(&fbdo, "/plant1/temperatureF", tempF);
    Firebase.RTDB.setFloat(&fbdo, "/plant1/humidity", hum);
  }


  if (millis() - lastDisplay >= DISPLAY_INTERVAL) {
    lastDisplay = millis();
    lcd.setCursor(0, 0);
    lcd.print("M:"); lcd.print(pct); lcd.print("% T:"); lcd.print(tempF); lcd.print("F");
    lcd.setCursor(0, 1);
    lcd.print("H:"); lcd.print(hum); lcd.print("% ");
    lcd.print(pct <= 20 ? "WATER" : "OK   ");
  }


  delay(1000);
}